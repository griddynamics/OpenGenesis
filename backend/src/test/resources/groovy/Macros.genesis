package groovy
template {
    name("Macros")
    version("0.1")
    createWorkflow("create")
    destroyWorkflow("destroy")

    def MY_CONSTANT = "Set from constant"

    def xxx = {"Call from closure"}

    defmacro "create_steps": { $message = "default" ->
        1 + 2
        teststep {
            text = $message
            skip = ($message as Boolean)
        }
    }

    defmacro "simple": {
        teststep {
            text = MY_CONSTANT
        }
    }

    defmacro "elvis" : { $var ->
        teststep {
            text = $system.databag['macros'].keya ?: $var
        }
    }

    defmacro "map": { $key, $mapValue ->
        withMap {
            text = $vars.myvar
            map = [ $key : $mapValue ]
        }
    }

    defmacro "defvar": { $name ->
        $name = {
           description = "Variable from template"
           isOptional = false
        }
    }

    defmacro "bad_require": { $message ->
        require {
            $message { 1 == 2 }
            "Oops again" { 2 == 1 }
        }

    }

    workflow("create") {
        steps {
            teststep {
                text = "test input"
            }
            teststep {
                text = "another input"
            }
        }
    }

    workflow("maps") {
        variables {
            macro:defvar(myvar)
        }
        steps {
           macro:map("operation", "subst")
        }
    }

    workflow("macros") {
        macro:bad_require("Oops")
        steps {
            teststep {
                text = "Static"
            }
            macro:create_steps("Passed from macro call")
            macro:create_steps($message: "Set with map")
            macro:create_steps()
            macro:simple()
            macro:create_steps($message: xxx)
            teststep {
                text = $databags['macros'].keya ?: "local"
            }
            macro:elvis("redefine")
        }
    }

    workflow("destroy") {
        steps {
            teststep {
                phase = "undeploy"
                text = "destroy"
            }
        }
    }
}