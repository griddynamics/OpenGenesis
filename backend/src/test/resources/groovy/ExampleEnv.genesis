/*
 * Copyright (c) 2011 Grid Dynamics Consulting Services, Inc, All Rights Reserved
 *   http://www.griddynamics.com
 *
 *   For information about the licensing and copyright of this document please
 *   contact Grid Dynamics at info@griddynamics.com.
 *
 *   $Id: $
 *   @Project:     Genesis
 *   @Description: A cloud deployment platform
 */

package groovy
template {
    name("TestEnv")
    version("0.1")
    createWorkflow("create")
    destroyWorkflow("destroy")
    dataSources {
        dataSource("staticList").name("ds1").config([list:["value1",  "value2"]])
        dataSource("staticList").name("ds2").config([list:["value3"]])
        dataSource("dependentList").name("ds3").config([list: [1,3,4]])
    }


    workflow("create") {
        variables {
            variable("nodesCount").as(Integer)
                .description("Erlang worker nodes count")
                .validator { it > 0 }
            variable("test").description("test")
            variable("optional").description("Optional variable").optional(defaultValue = 1)
            variable("optionalNoValue").description("Optional variable without default value").optional()
            variable("list").as(Integer).description("Variable that has one value from a list").oneOf {[1, 2, 3]}.optional()
            variable("listDS1").as(String).description("Variable that has one value from DS").dataSource("ds1").optional()
            variable("listDS12").as(String).description("Variable that has one value from DS").oneOf {ds1 + ds2}.optional()
            variable("dependent").as(String).description("Dependent variable").dependsOn("nodesCount").dataSource("ds3").optional()
            variable("doubleDep").as(String).description("Double dependent variable").dependsOn("nodesCount").dependsOn("dependent").dataSource("ds3").optional()
            variable("triple").as(String).description("Double dependent variable").dependsOn("list")
                    .dependsOn("nodesCount").dependsOn("dependent").dataSource("ds3").optional()
        }

        steps {
            teststep {
                phase = "provision"
                text = nodesCount
            }
            teststep {
                phase = "install"
                precedingPhases = ["provision"]
                text = "erlang2"
            }
        }
    }

    workflow("destroy") {
        steps {
            teststep {
                phase = "undeply"
                text = "destroy"
            }
        }
    }
}