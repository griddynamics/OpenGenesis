<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2010-2012 Grid Dynamics Consulting Services, Inc, All Rights Reserved
      http://www.griddynamics.com

      This library is free software; you can redistribute it and/or modify it under the terms of
      the GNU Lesser General Public License as published by the Free Software Foundation; either
      version 2.1 of the License, or any later version.

      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
      AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
      IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
      DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
      FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
      DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
      SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
      CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
      OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
      OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

      Project:     Genesis
      Description:  Continuous Delivery Platform

-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:s="http://www.springframework.org/schema/security"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">
    <context:property-placeholder location="${backend.properties}" system-properties-mode="OVERRIDE"/>

    <s:global-method-security pre-post-annotations="enabled" />

    <!--<bean id="identityExtractor" class="com.griddynamics.genesis.spring.security.acls.ScalaObjectIdentityGenerator"/>-->

    <bean id="webExprHandler" class="com.griddynamics.genesis.spring.security.WebExpressionHandler">
        <property name="permissionEvaluator" ref="aclPermissionEvaluator"/>
    </bean>

    <s:http use-expressions="true" disable-url-rewriting="true" realm="Genesis" entry-point-ref="genesisAuthenticationEntryPoint" create-session="never">
        <s:expression-handler ref="webExprHandler"/>
		<s:intercept-url pattern="/" access="isAuthenticated()" />
        <s:intercept-url pattern="/favicon.ico" access="permitAll" />
        <s:intercept-url pattern="/login.html" access="permitAll" />
        <s:intercept-url pattern="/*.html" access="isAuthenticated()" />
        <s:intercept-url pattern="/*.json" access="isAuthenticated()" />
        <s:intercept-url pattern="/app/**/*.js" access="permitAll" />
        <s:intercept-url pattern="/app/**/*.coffee" access="permitAll" />
        <s:intercept-url pattern="/app/**/*.html" access="permitAll" />
        <s:intercept-url pattern="/assets/css/**" access="permitAll" />
        <s:intercept-url pattern="/assets/img/**" access="permitAll" />
        <s:intercept-url pattern="/assets/js/**" access="permitAll" />
        <s:intercept-url pattern="/content/**" access="permitAll" />

        <s:intercept-url pattern="/rest" access="isAuthenticated()" />
        <s:intercept-url pattern="/rest/groups*"  method="GET" access="hasRole('ROLE_GENESIS_ADMIN') or hasRole('ROLE_GENESIS_PROJECT_ADMIN') or hasRole('ROLE_GENESIS_READONLY')" />
        <s:intercept-url pattern="/rest/users*"   method="GET" access="hasRole('ROLE_GENESIS_ADMIN') or hasRole('ROLE_GENESIS_PROJECT_ADMIN') or hasRole('ROLE_GENESIS_READONLY')" />

        <s:intercept-url pattern="/rest/groups/**" method="GET"  access="hasRole('ROLE_GENESIS_ADMIN')  or hasRole('ROLE_GENESIS_READONLY')" />
        <s:intercept-url pattern="/rest/groups/**" access="hasRole('ROLE_GENESIS_ADMIN')" />

        <s:intercept-url pattern="/rest/roles/**"  method="GET" access="hasRole('ROLE_GENESIS_ADMIN') or hasRole('ROLE_GENESIS_READONLY')" />
        <s:intercept-url pattern="/rest/roles/**"  access="hasRole('ROLE_GENESIS_ADMIN')" />

        <s:intercept-url pattern="/rest/projectRoles**" method="GET" access="hasRole('ROLE_GENESIS_ADMIN') or hasRole('ROLE_GENESIS_PROJECT_ADMIN') or hasRole('ROLE_GENESIS_READONLY')" />

        <s:intercept-url pattern="/rest/users/**"   method="GET" access="hasRole('ROLE_GENESIS_ADMIN') or hasRole('ROLE_GENESIS_READONLY')"/>
        <s:intercept-url pattern="/rest/users/**"   access="hasRole('ROLE_GENESIS_ADMIN')"/>

        <s:intercept-url pattern="/rest/plugins/**"  method="GET" access="hasRole('ROLE_GENESIS_ADMIN') or hasRole('ROLE_GENESIS_READONLY')" />
        <s:intercept-url pattern="/rest/plugins/**"  access="hasRole('ROLE_GENESIS_ADMIN')" />

        <s:intercept-url pattern="/rest/settings/**" method="GET" access="hasRole('ROLE_GENESIS_ADMIN')  or hasRole('ROLE_GENESIS_READONLY')" />
        <s:intercept-url pattern="/rest/settings/**" access="hasRole('ROLE_GENESIS_ADMIN')" />

        <s:intercept-url pattern="/rest/databags/**" method="GET" access="hasRole('ROLE_GENESIS_ADMIN')  or hasRole('ROLE_GENESIS_READONLY')" />
        <s:intercept-url pattern="/rest/databags/**" access="hasRole('ROLE_GENESIS_ADMIN')" />

        <s:intercept-url pattern="/rest/agents"  method="GET" access="hasRole('ROLE_GENESIS_ADMIN') or hasRole('ROLE_GENESIS_READONLY')" />
        <s:intercept-url pattern="/rest/agents/**"  method="GET" access="hasRole('ROLE_GENESIS_ADMIN') or hasRole('ROLE_GENESIS_READONLY')" />
        <s:intercept-url pattern="/rest/agents/**"  access="hasRole('ROLE_GENESIS_ADMIN')" />

        <s:intercept-url pattern="/rest/projects" method="GET" access="isAuthenticated()"/>
        <s:intercept-url pattern="/rest/projects/" method="GET" access="isAuthenticated()"/>

        <s:intercept-url pattern="/rest/projects/*/permissions" method="GET" access="hasRole('ROLE_GENESIS_ADMIN') or hasRole('ROLE_GENESIS_READONLY') or
                hasPermission( #urlId('/rest/projects/{id}/.*', #url), 'com.griddynamics.genesis.api.Project', 'read') or
                hasPermission( #urlId('/rest/projects/{id}/.*', #url), 'com.griddynamics.genesis.api.Project', 'administration')"/>

        <s:intercept-url pattern="/rest/projects/*/settings" method="GET" access="hasRole('ROLE_GENESIS_ADMIN') or hasRole('ROLE_GENESIS_READONLY') or
                    hasPermission( #urlId('/rest/projects/{id}/.*', #url), 'com.griddynamics.genesis.api.Project', 'administration')"  />

        <s:intercept-url pattern="/rest/projects/*/envs" method="POST" access="hasRole('ROLE_GENESIS_ADMIN') or hasRole('ROLE_GENESIS_READONLY') or
                    hasPermission( #urlId('/rest/projects/{id}/.*', #url), 'com.griddynamics.genesis.api.Project', 'read') or
                    hasPermission( #urlId('/rest/projects/{id}/.*', #url), 'com.griddynamics.genesis.api.Project', 'administration')"
        />

        <s:intercept-url pattern="/rest/projects/*/envs*" method="GET" access="hasRole('ROLE_GENESIS_ADMIN') or hasRole('ROLE_GENESIS_READONLY') or
                    hasPermission( #urlId('/rest/projects/{id}/.*', #url), 'com.griddynamics.genesis.api.Project', 'read') or
                    hasPermission( #urlId('/rest/projects/{id}/.*', #url), 'com.griddynamics.genesis.api.Project', 'administration')"/>
        <s:intercept-url pattern="/rest/projects/*/envs*" access="hasRole('ROLE_GENESIS_ADMIN') or
                    hasPermission( #urlId('/rest/projects/{id}/.*', #url), 'com.griddynamics.genesis.api.Project', 'read') or
                    hasPermission( #urlId('/rest/projects/{id}/.*', #url), 'com.griddynamics.genesis.api.Project', 'administration')"/>


        <s:intercept-url pattern="/rest/projects/*/roles" method="GET" access="hasRole('ROLE_GENESIS_ADMIN') or hasRole('ROLE_GENESIS_READONLY') or
                    hasPermission( #urlId('/rest/projects/{id}/.*', #url), 'com.griddynamics.genesis.api.Project', 'administration')"  />

        <s:intercept-url pattern="/rest/projects/*/roles/**" method="GET" access="hasRole('ROLE_GENESIS_ADMIN') or hasRole('ROLE_GENESIS_READONLY') or
                    hasPermission( #urlId('/rest/projects/{id}/.*', #url), 'com.griddynamics.genesis.api.Project', 'administration')"  />
        <s:intercept-url pattern="/rest/projects/*/roles/**" access="hasRole('ROLE_GENESIS_ADMIN') or
                    hasPermission( #urlId('/rest/projects/{id}/.*', #url), 'com.griddynamics.genesis.api.Project', 'administration')"  />


        <s:intercept-url pattern="/rest/projects/*/envs/*/access" method="GET" access="
             @environmentSecurity.restrictionsEnabled() and (
                hasRole('ROLE_GENESIS_ADMIN') or hasRole('ROLE_GENESIS_READONLY')
                or
                hasPermission( #urlId('/rest/projects/{id}.*', #url), 'com.griddynamics.genesis.api.Project', 'administration')
             )"
        />

        <s:intercept-url pattern="/rest/projects/*/envs/*/access" access="
             @environmentSecurity.restrictionsEnabled() and (
                hasRole('ROLE_GENESIS_ADMIN')
                or
                hasPermission( #urlId('/rest/projects/{id}.*', #url), 'com.griddynamics.genesis.api.Project', 'administration')
             )"
        />

        <s:intercept-url pattern="/rest/projects/*/envs/*/actions" method="GET" access="
             hasRole('ROLE_GENESIS_ADMIN') or hasPermission( #urlId('/rest/projects/{id}.*', #url), 'com.griddynamics.genesis.api.Project', 'administration') or
                (
                    not(@environmentSecurity.restrictionsEnabled())
                        and
                    hasPermission( #urlId('/rest/projects/{id}.*', #url), 'com.griddynamics.genesis.api.Project', 'read')
                ) or (
                    @environmentSecurity.restrictionsEnabled()
                       and
                    hasPermission( #urlId('/rest/projects/.*/envs/{id}.*', #url), 'com.griddynamics.genesis.api.Environment', 'read')
                )"
        />

        <s:intercept-url pattern="/rest/projects/*/envs/*/workflows" method="GET" access="
             hasRole('ROLE_GENESIS_ADMIN') or hasPermission( #urlId('/rest/projects/{id}.*', #url), 'com.griddynamics.genesis.api.Project', 'administration') or
                (
                    not(@environmentSecurity.restrictionsEnabled())
                        and
                    hasPermission( #urlId('/rest/projects/{id}.*', #url), 'com.griddynamics.genesis.api.Project', 'read')
                ) or (
                    @environmentSecurity.restrictionsEnabled()
                       and
                    hasPermission( #urlId('/rest/projects/.*/envs/{id}.*', #url), 'com.griddynamics.genesis.api.Environment', 'read')
                )"
        />

        <s:intercept-url pattern="/rest/projects/*/envs/**" method="GET" access="
             hasRole('ROLE_GENESIS_ADMIN') or hasRole('ROLE_GENESIS_READONLY') or hasPermission( #urlId('/rest/projects/{id}.*', #url), 'com.griddynamics.genesis.api.Project', 'administration') or
                (
                    not(@environmentSecurity.restrictionsEnabled())
                        and
                    hasPermission( #urlId('/rest/projects/{id}.*', #url), 'com.griddynamics.genesis.api.Project', 'read')
                ) or (
                    @environmentSecurity.restrictionsEnabled()
                       and
                    hasPermission( #urlId('/rest/projects/.*/envs/{id}.*', #url), 'com.griddynamics.genesis.api.Environment', 'read')
                )"
        />

        <s:intercept-url pattern="/rest/projects/*/envs/**" access="
                hasRole('ROLE_GENESIS_ADMIN') or hasPermission( #urlId('/rest/projects/{id}.*', #url), 'com.griddynamics.genesis.api.Project', 'administration') or
                (
                    not(@environmentSecurity.restrictionsEnabled())
                        and
                    hasPermission( #urlId('/rest/projects/{id}.*', #url), 'com.griddynamics.genesis.api.Project', 'read')
                ) or (
                    @environmentSecurity.restrictionsEnabled()
                       and
                    hasPermission( #urlId('/rest/projects/.*/envs/{id}.*', #url), 'com.griddynamics.genesis.api.Environment', 'read')
                )"
        />

        <s:intercept-url pattern="/rest/projects/*/configs*" method="GET" access="
            hasRole('ROLE_GENESIS_ADMIN') or hasRole('ROLE_GENESIS_READONLY') or
            hasPermission( #urlId('/rest/projects/{id}.*', #url), 'com.griddynamics.genesis.api.Project', 'administration') or
            hasPermission( #urlId('/rest/projects/{id}.*', #url), 'com.griddynamics.genesis.api.Project', 'read')"
        />

        <s:intercept-url pattern="/rest/projects/*/configs*" method="POST" access="
            hasRole('ROLE_GENESIS_ADMIN') or
            hasPermission( #urlId('/rest/projects/{id}.*', #url), 'com.griddynamics.genesis.api.Project', 'administration')"
        />

        <s:intercept-url pattern="/rest/projects/*/configs/**" method="GET" access="
            hasRole('ROLE_GENESIS_ADMIN') or
            hasRole('ROLE_GENESIS_READONLY') or
            hasPermission( #urlId('/rest/projects/{id}.*', #url), 'com.griddynamics.genesis.api.Project', 'administration') or
            hasPermission( #urlId('/rest/projects/.*/configs/{id}.*', #url), 'com.griddynamics.genesis.api.Configuration', 'read')"
        />

        <s:intercept-url pattern="/rest/projects/*/configs/**" access="
            hasRole('ROLE_GENESIS_ADMIN') or
            hasPermission( #urlId('/rest/projects/{id}.*', #url), 'com.griddynamics.genesis.api.Project', 'administration')
        "/>

        <s:intercept-url pattern="/rest/projects/*/templates*" method="GET"    access="
            hasRole('ROLE_GENESIS_ADMIN') or hasRole('ROLE_GENESIS_READONLY')
            or hasPermission( #urlId('/rest/projects/{id}.*', #url), 'com.griddynamics.genesis.api.Project', 'read')
            or hasPermission( #urlId('/rest/projects/{id}.*', #url), 'com.griddynamics.genesis.api.Project', 'administration')"
        />

        <!--
             This is 'partial apply' call. If only admins are allowed to use it, then with envirinment secutiry enabled, users without project
             admin role are unable to call additional workflows on environments (when these workflows use dependent variables) - the same situation
             with readonly admin. Let's assume than this call is not change anything, and basically every user that is granted with access to
             environment creation can also do a partial apply.
        -->
        <s:intercept-url pattern="/rest/projects/*/templates/**" method="POST"    access="hasRole('ROLE_GENESIS_ADMIN') or hasRole('ROLE_GENESIS_READONLY') or
                    hasPermission( #urlId('/rest/projects/{id}.*', #url), 'com.griddynamics.genesis.api.Project', 'read') or
                    hasPermission( #urlId('/rest/projects/{id}.*', #url), 'com.griddynamics.genesis.api.Project', 'administration')"
        />

        <s:intercept-url pattern="/rest/projects/*/server-arrays/**" method="GET"    access="hasRole('ROLE_GENESIS_ADMIN') or hasRole('ROLE_GENESIS_READONLY') or
                    hasPermission( #urlId('/rest/projects/{id}.*', #url), 'com.griddynamics.genesis.api.Project', 'administration')" />

        <s:intercept-url pattern="/rest/projects/*/credentials/**" method="GET"    access="hasRole('ROLE_GENESIS_ADMIN') or hasRole('ROLE_GENESIS_READONLY') or
                    hasPermission( #urlId('/rest/projects/{id}.*', #url), 'com.griddynamics.genesis.api.Project', 'administration')" />

        <s:intercept-url pattern="/rest/projects/**" method="GET"    access="hasRole('ROLE_GENESIS_ADMIN') or hasRole('ROLE_GENESIS_READONLY') or
                    hasPermission( #urlId('/rest/projects/{id}.*', #url), 'com.griddynamics.genesis.api.Project', 'read') or
                    hasPermission( #urlId('/rest/projects/{id}.*', #url), 'com.griddynamics.genesis.api.Project', 'administration')" />

        <s:intercept-url pattern="/rest/projects/*/**" method="GET" access="hasRole('ROLE_GENESIS_ADMIN') or hasRole('ROLE_GENESIS_READONLY') or
                            hasPermission( #urlId('/rest/projects/{id}.*', #url), 'com.griddynamics.genesis.api.Project', 'administration')"/>
        <s:intercept-url pattern="/rest/projects/*/**" access="hasRole('ROLE_GENESIS_ADMIN') or
                            hasPermission( #urlId('/rest/projects/{id}.*', #url), 'com.griddynamics.genesis.api.Project', 'administration')"/>

        <s:intercept-url pattern="/rest/projects/*" method="DELETE" access="hasRole('ROLE_GENESIS_ADMIN')"/>
        <s:intercept-url pattern="/rest/projects*"  method="POST"   access="hasRole('ROLE_GENESIS_ADMIN')"/>
        <s:intercept-url pattern="/rest/projects/"  method="POST"   access="hasRole('ROLE_GENESIS_ADMIN')"/>
        <s:intercept-url pattern="/rest/projects/*" method="PUT"    access="hasRole('ROLE_GENESIS_ADMIN') or
                            hasPermission( #urlId('/rest/projects/{id}', #url), 'com.griddynamics.genesis.api.Project', 'administration')" />

        <s:intercept-url pattern="/rest/metrics*" access="hasRole('ROLE_GENESIS_ADMIN')"/>

        <s:intercept-url pattern="/rest/jobs-stat"  method="GET"   access="hasRole('ROLE_GENESIS_ADMIN') or hasRole('ROLE_GENESIS_READONLY')"/>

        <s:intercept-url pattern="/rest/system/*" method="GET" access="hasRole('ROLE_GENESIS_ADMIN') or hasRole('ROLE_GENESIS_READONLY')"/>

        <s:intercept-url pattern="/rest/system/*" method="POST" access="hasRole('ROLE_GENESIS_ADMIN')"/>

        <s:intercept-url pattern="/rest/**" access="isAuthenticated()" />

        <s:intercept-url pattern="/metrics*"  method="GET"   access="hasRole('ROLE_GENESIS_ADMIN') or hasRole('ROLE_GENESIS_READONLY')"/>
        <s:intercept-url pattern="/metrics/**"  method="GET"   access="hasRole('ROLE_GENESIS_ADMIN') or hasRole('ROLE_GENESIS_READONLY')"/>

        <s:intercept-url pattern="/**" access="denyAll" />

        <s:form-login login-page="/login.html"
                      authentication-success-handler-ref="authenticationSuccessHandler"
                      authentication-failure-handler-ref="authenticationFailureHandler"
                      login-processing-url="/signin"/>

        <s:http-basic/>
        <s:logout logout-url="/logout" invalidate-session="true" logout-success-url="/login.html"/>
        <s:remember-me key="GenesisRememberMeKey" token-validity-seconds="604800" user-service-ref="genesisUserDetailsService"/>
        <s:custom-filter ref="headerBasedAuthFilter" before="BASIC_AUTH_FILTER"/>
	</s:http>


    <bean id="genesisAuthenticationEntryPoint"
          class="com.griddynamics.genesis.spring.security.GenesisAuthenticationEntryPoint">
        <constructor-arg value="/login.html"/>
    </bean>

    <bean id="authenticationSuccessHandler"
          class="com.griddynamics.genesis.spring.security.AuthenticationSuccessHandler"/>

    <bean id="authenticationFailureHandler"
          class="com.griddynamics.genesis.spring.security.AuthenticationFailureHandler"/>

    <s:authentication-manager alias="authenticationManager">
        <!--<s:authentication-provider>
            <s:password-encoder hash="sha-256"/>
            <s:jdbc-user-service data-source-ref="dataSource"/>
        </s:authentication-provider>-->
        <s:authentication-provider ref="modeDependentAuthProvider"/>
        <s:authentication-provider user-service-ref="genesisUserDetailsService">
            <s:password-encoder hash="sha-256"/>
        </s:authentication-provider>
    </s:authentication-manager>

    <bean id="modeDependentAuthProvider" class="com.griddynamics.genesis.spring.security.AuthProviderFactoryBean">
        <property name="configService" ref="configService"/>
        <property name="defaultAuthProvider" ref="externalAuthenticationProvider"/>
    </bean>

    <bean id="genesisUserDetailsService" class="com.griddynamics.genesis.spring.security.GenesisUserDetailsService">
        <!--
            genesis.system.admin.sha.password=aeebad4a796fcc2e15dc4c6061b45ed9b373f26adfc798ca7d2d8cc58182718e
            genesis.system.admin.username=genesis
        -->
        <constructor-arg name="adminPassword" value="${genesis.web.admin.sha.password:}"/>
        <constructor-arg name="adminUsername" value="${genesis.web.admin.username:}" />
        <constructor-arg name="authorityService" ref="authorityService"/>
        <constructor-arg name="projectAuthorityService" ref="projectAuthorityService"/>
    </bean>

    <bean id="externalAuthenticationProvider" class="com.griddynamics.genesis.spring.security.ExternalUserAuthenticationProvider">
        <constructor-arg ref="genesisExternalDetailsService"/>
    </bean>

    <bean id="genesisExternalDetailsService" class="com.griddynamics.genesis.spring.security.ExternalUserDetailsService">
        <constructor-arg name="authorityService" ref="authorityService" type="com.griddynamics.genesis.service.AuthorityService"/>
        <constructor-arg name="projectAuthorityService" ref="projectAuthorityService" type="com.griddynamics.genesis.service.ProjectAuthorityService"/>
        <constructor-arg name="adminUsername" value="${genesis.web.admin.username:}" type="java.lang.String"/>
    </bean>

    <bean id="headerBasedAuthFilter" class="com.griddynamics.genesis.spring.security.HeaderBasedAuthFilter"/>

</beans>